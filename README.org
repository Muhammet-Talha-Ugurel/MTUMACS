	#+AUTHOR: MTU
#+PROPERTY: header-args :tangle init.el

* Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
* Package Managment
** Setup package.el for melpa.

#+begin_src emacs-lisp
  (require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

** Setup use package for easy package magetment

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
(package-install 'use-package))
#+end_src

** Delete Sellecetion

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

* Theme

** Doom Emacs theme package install and setup for gnu emacs

#+begin_src emacs-lisp
      (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-homage-black t)
        ;;(load-theme 'soothe t nil)
	;;(load-theme 'doom-tokyo-night t)
	;;(load-theme 'doom-one t)
	(doom-themes-org-config))
#+end_src

* Graphical User Interface

** Icons

#+begin_src emacs-lisp
(use-package all-the-icons :ensure t)
#+end_src

** Line
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "MTUEMACS")
  (setq dashboard-startup-banner "~/.emacs-mtumacs.d/the-logo-of-the-best-editor.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src

** Emacs Clinet dashboard

#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** DOOM Mode line

#+begin_src emacs-lisp
(use-package doom-modeline
:ensure t)
(doom-modeline-mode 1)
#+end_src

** Smoot scruling

#+begin_src emacs-lisp
(setq scroll-conservatively 101) ;; value greater than 100 gets rid of half page jumping
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; how many lines at a time
(setq mouse-wheel-progressive-speed t) ;; accelerate scrolling
(setq mouse-wheel-follow-mouse 't)
#+end_src

* Instaling Packages

** Projectile package install

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+end_src

** IVY install

#+begin_src emacs-lisp
	  (use-package ivy
		:ensure t
		:diminish
		:bind (("C-s" . swiper)
		   :map ivy-minibuffer-map
		   ("TAB" . ivy-alt-done)
		   ("C-a" . ivy-alt-done)
		   ("C-j" . ivy-next-line)
		   ("C-k" . ivy-previous-line)
		   :map ivy-switch-buffer-map
		   ("C-k" . ivy-previous-line)
		   ("C-l" . ivy-done)
		   ("C-d" . ivy-switch-buffer-kill)
		   :map ivy-reverse-i-search-map
		   ("C-k" . ivy-previous-line)
		   ("C-d" . ivy-reverse-i-search-kill))
		:config
		(ivy-mode 1))
	(use-package ivy-rich
	  :after ivy
	  :ensure t
	  :init
	  (ivy-rich-mode 1))
#+end_src

** Counsel

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Raninbow parenetsis

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit

#+begin_src emacs-lisp
    (use-package magit
    :ensure t)
  ;;(use-package forge
   ;;:ensure t)
#+end_src

** ORG mode

#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      )

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
  :ensure t
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (efs/org-font-setup))

  (use-package org-bullets
  :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
  :ensure t
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

** EVIL mode installation and set up

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-i-jump nil)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

* Key Bindings

** General Keybindings package

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup t))
#+end_src

** Zoom in and out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** WHICH KEY

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src

** Buffer keys

#+begin_src emacs-lisp
(nvmap :prefix "SPC"
       "b b"   '(ibuffer :which-key "Ibuffer")
       "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
       "b k"   '(kill-current-buffer :which-key "Kill current buffer")
       "b n"   '(next-buffer :which-key "Next buffer")
       "b p"   '(previous-buffer :which-key "Previous buffer")
       "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
       "b K"   '(kill-buffer :which-key "Kill buffer"))
#+end_src

** File keys

#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "."     '(find-file :which-key "Find file")
       "f f"   '(find-file :which-key "Find file")
       "f r"   '(counsel-recentf :which-key "Recent files")
       "f s"   '(save-buffer :which-key "Save file")
       "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
       "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
       "f C"   '(copy-file :which-key "Copy file")
       "f D"   '(delete-file :which-key "Delete file")
       "f R"   '(rename-file :which-key "Rename file")
       "f S"   '(write-file :which-key "Save file as...")
       "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src

** Basic key bindings

#+begin_src emacs-lisp
      (nvmap :keymaps 'override :prefix "SPC"
	     "SPC"   '(counsel-M-x :which-key "M-x")
	     "c c"   '(compile :which-key "Compile")
	     "c C"   '(recompile :which-key "Recompile")
	     "h r r" '((lambda () (interactive) (load-file "~/.emacs-mtumacs.d/init.el")) :which-key "Reload emacs config")
	     "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
      (nvmap :keymaps 'override :prefix "SPC"
	     "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
	     "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
	     "m ."   '(counsel-org-goto :which-key "Counsel org goto")
	     "m e"   '(org-export-dispatch :which-key "Org export dispatch")
	     "m f"   '(org-footnote-new :which-key "Org footnote new")
	     "m h"   '(org-toggle-heading :which-key "Org toggle heading")
	     "m i"   '(org-toggle-item :which-key "Org toggle item")
	     "m n"   '(org-store-link :which-key "Org store link")
	     "m o"   '(org-set-property :which-key "Org set property")
	     "m t"   '(org-todo :which-key "Org todo")
	     "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
	     "m B"   '(org-babel-tangle :which-key "Org babel tangle")
	     "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
	     "m T"   '(org-todo-list :which-key "Org todo list")
	     "o a"   '(org-agenda :which-key "Org agenda"))
#+end_src

#+RESULTS:

* LSP

#+begin_src emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))
  (use-package lsp-mode
  :ensure t
	:commands (lsp lsp-deferred)
	:hook (lsp-mode . efs/lsp-mode-setup)
	:init
	(setq lsp-keymap-prefix "C-l")  ;; 'C-l'
	:config
  (lsp-enable-which-key-integration t))
#+end_src

* <Tab> Width

#+begin_src emacs-lisp
	(setq-default indent-tabs-mode t)
	(setq backward-delete-char-untabify-method nil)
  (setq-default tab-width 4)
	(setq indent-tabs-mode t)
	(defun my-insert-tab-char ()
	(interactive)
	(insert "\t"))
  (global-set-key (kbd "TAB") 'my-insert-tab-char)
	;;(add-hook 'c-mode-hook ;; guessing
	  ;; '(lambda ()
		;;(local-set-key "TAB" 'my-insert-tab-char)))
#+end_src

* Copilot

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

#+begin_src emacs-lisp
		(use-package copilot
		  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
		  :ensure t)
	  (add-hook 'prog-mode-hook 'copilot-mode)
	(with-eval-after-load 'company
	  ;; disable inline previews
	  (delq 'company-preview-if-just-one-frontend company-frontends))
  
	(define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
	(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  (defun my-tab ()
	(interactive)
	(or (copilot-accept-completion)
		(ac-expand nil)))

  (with-eval-after-load 'auto-complete
	; disable inline preview
	(setq ac-disable-inline t)
	; show menu if have only one candidate
	(setq ac-candidate-menu-min 0))
  
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
(with-eval-after-load 'copilot
  (evil-define-key 'insert copilot-mode-map
    (kbd "<tab>") #'my/copilot-tab))
#+end_src
